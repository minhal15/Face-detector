{"ast":null,"code":"var _jsxFileName = \"/Users/minhalmuraj/Desktop/Face-detector/src/App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/navigation/navigation.js';\nimport Logo from './components/Logo/logo';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm.js';\nimport Rank from './components/Rank/Rank.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '4bb3a25f2ea84d16a3bb1756fc5dbf39' // enter your API key here\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      // const USER_ID = 'mo-min14';\n      // // Your PAT (Personal Access Token) can be found in the portal under Authentification\n      // const PAT = '2ea1e3178ac14268ab18667a98d57b87';\n      // const APP_ID = 'my-first-application';\n      // // Change these to whatever model and image URL you want to use\n      // const MODEL_ID = 'face-detection';\n      // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n\n      // ///////////////////////////////////////////////////////////////////////////////////\n      // // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      // ///////////////////////////////////////////////////////////////////////////////////\n\n      // const raw = JSON.stringify({\n      //     \"user_app_id\": {\n      //         \"user_id\": USER_ID,\n      //         \"app_id\": APP_ID\n      //     },\n      //     \"inputs\": [\n      //         {\n      //             \"data\": {\n      //                 \"image\": {\n      //                     \"url\": IMAGE_URL\n      //                 }\n      //             }\n      //         }\n      //     ]\n      // });\n\n      // const requestOptions = {\n      //     method: 'POST',\n      //     headers: {\n      //         'Accept': 'application/json',\n      //         'Authorization': 'Key ' + PAT\n      //     },\n      //     body: raw\n      // };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n      // [![face-detection](https://clarifai.com/clarifai/main/models/face-detection/badge)](https://clarifai.com/clarifai/main/models/face-detection?tab=overview)\n\n      // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n      //     .then((response) => response.json())\n      //     .then((result) => \n      //       console.log(result)\n      //     )\n      //     .catch((error) => console.log(\"error\", error));\n\n      // this.setState({imageUrl: this.state.input});\n      // app.models.predict(\n      //   Clarifai.FACE_DETECT_MODEL,\n      //   this.state.input)\n      // .then(response => \n      //   this.displayFaceBox(this.calculateFaceLocation(response)))\n      //     .catch(err => console.log(err))\n\n      console.log('click');\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log(response.outputs[0].data.regions[0].region_info.bounding_box);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    const {\n      imageUrl,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: box,\n        imageUrl: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","Clarifai","FaceRecognition","ImageLinkForm","Rank","app","App","apiKey","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","console","log","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","render"],"sources":["/Users/minhalmuraj/Desktop/Face-detector/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Navigation from './components/navigation/navigation.js';\nimport Logo from './components/Logo/logo';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm.js';\nimport Rank from './components/Rank/Rank.js';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey:'4bb3a25f2ea84d16a3bb1756fc5dbf39' // enter your API key here\n}) ;\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n\n      // const USER_ID = 'mo-min14';\n      // // Your PAT (Personal Access Token) can be found in the portal under Authentification\n      // const PAT = '2ea1e3178ac14268ab18667a98d57b87';\n      // const APP_ID = 'my-first-application';\n      // // Change these to whatever model and image URL you want to use\n      // const MODEL_ID = 'face-detection';\n      // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n\n      // ///////////////////////////////////////////////////////////////////////////////////\n      // // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      // ///////////////////////////////////////////////////////////////////////////////////\n\n      // const raw = JSON.stringify({\n      //     \"user_app_id\": {\n      //         \"user_id\": USER_ID,\n      //         \"app_id\": APP_ID\n      //     },\n      //     \"inputs\": [\n      //         {\n      //             \"data\": {\n      //                 \"image\": {\n      //                     \"url\": IMAGE_URL\n      //                 }\n      //             }\n      //         }\n      //     ]\n      // });\n\n      // const requestOptions = {\n      //     method: 'POST',\n      //     headers: {\n      //         'Accept': 'application/json',\n      //         'Authorization': 'Key ' + PAT\n      //     },\n      //     body: raw\n      // };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n      // [![face-detection](https://clarifai.com/clarifai/main/models/face-detection/badge)](https://clarifai.com/clarifai/main/models/face-detection?tab=overview)\n      \n      // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n      //     .then((response) => response.json())\n      //     .then((result) => \n      //       console.log(result)\n      //     )\n      //     .catch((error) => console.log(\"error\", error));\n\n    // this.setState({imageUrl: this.state.input});\n    // app.models.predict(\n    //   Clarifai.FACE_DETECT_MODEL,\n    //   this.state.input)\n    // .then(response => \n    //   this.displayFaceBox(this.calculateFaceLocation(response)))\n    //     .catch(err => console.log(err))\n\n    console.log('click');\n    this.setState({imageUrl: this.state.input})\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    .then((response)=>{\n        console.log(response.outputs[0].data.regions[0].region_info.bounding_box);\n      }) \n      .catch((err) => {\n        console.log(err);\n      });    \n    \n\n  }\n\n  render() {\n    const { imageUrl, box } = this.state;\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition box={box} imageUrl={imageUrl}/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}